apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
 selector:
  app: redis
ports:
- name: redis
protocol: TCP
port: 6379
targetPort: 6379
type: ClusterIP
apiVersion: apps/v1
kind: Deployment
metadata:
name: redis
spec:
selector:
matchLabels:
app: redis
replicas: 4
template:
metadata:
labels:
app: redis
spec:
containers:
- name: redis
image: redis
ports:
- name: redis
containerPort: 6379
resources:
requests:
cpu: "100m"
memory: "100Mi"
nodeSelector:
node.role != manager
restartPolicy: Always
apiVersion: v1
kind: Service
metadata:
name: apache
spec:
selector:
app: apache
ports:
- name: http
protocol: TCP
port: 8080
targetPort: 80
type: ClusterIP
apiVersion: apps/v1
kind: Deployment
metadata:
name: apache
spec:
selector:
matchLabels:
app: apache
replicas: 10
template:
metadata:
labels:
app: apache
spec:
containers:
- name: apache
image: httpd
ports:
- name: http
containerPort: 80
resources:
requests:
cpu: "100m"
memory: "100Mi"
nodeSelector:
node.role != manager
restartPolicy: Always
apiVersion: v1
kind: Service
metadata:
name: postgres
spec:
selector:
app: postgres
ports:
- name: postgres
protocol: TCP
port: 5432
targetPort: 5432
type: ClusterIP
apiVersion: apps/v1
kind: Deployment
metadata:
name: postgres
spec:
selector:
matchLabels:
app: postgres
replicas: 1
template:
metadata:
labels:
app: postgres
spec:
containers:
- name: postgres
image: postgres
env:
- name: POSTGRES_PASSWORD
value: password
ports:
- name: postgres
containerPort: 5432
resources:
requests:
cpu: "100m"
memory: "100Mi"
nodeSelector:
node.role != manager
restartPolicy: Always
apiVersion: v1
kind: NetworkPolicy
metadata:
name: mynetwork
spec:
podSelector: {}
ingress:

from:
podSelector: {}
policyTypes:
Ingress
