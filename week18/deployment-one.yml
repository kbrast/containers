apiVersion: apps/v1  # Define the Kubernetes API version to use
kind: Deployment  # Create a Deployment resource
metadata:
  name: deployment-one  # Give this Deployment the name "deployment-one"
spec:
  replicas: 2  # Create 2 replicas of the pod created by this Deployment
  selector:
    matchLabels:  # Select pods with labels that match these labels
      app: nginx  # The label "app" must be set to "nginx"
      deployment: one  # The label "deployment" must be set to "one"
  template:
    metadata:
      labels:
        app: nginx  # Set the label "app" to "nginx"
        deployment: one  # Set the label "deployment" to "one"
    spec:
      containers:  # Specify a list of containers to run in this pod
      - name: nginx  # Give this container the name "nginx"
        image: nginx  # Use the official Nginx Docker image
        volumeMounts:  # Mount a volume in the container's filesystem
        - name: config-volume  # Use the volume named "config-volume"
          mountPath: /usr/share/nginx/html  # Mount the volume at this path in the container
      volumes:  # Define a list of volumes to use in this pod
      - name: config-volume  # Create a volume named "config-volume"
        configMap:  # Mount a ConfigMap in this volume
          name: deployment-one-configmap  # Use the ConfigMap named "deployment-one-configmap"
          items:  # Specify a list of items to include in this ConfigMap
          - key: index.html  # Include the key "index.html" from the ConfigMap
            path: index.html  # Mount this key at this path in the volume
---  # Use a YAML separator to separate resources
apiVersion: v1  # Define the Kubernetes API version to use
kind: ConfigMap  # Create a ConfigMap resource
metadata:
  name: deployment-one-configmap  # Give this ConfigMap the name "deployment-one-configmap"
data:
  index.html: |  # Include the file contents for the key "index.html" in this ConfigMap
    <html>
    <body>
    <h1>This is Deployment One</h1>
    </body>
    </html>
